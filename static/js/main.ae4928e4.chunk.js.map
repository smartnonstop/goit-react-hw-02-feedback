{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","components/App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Number","isNaN","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Section","title","children","Notification","message","App","state","incrementStatistics","e","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","ReactDOM","render","document","getElementById"],"mappings":"sPA0BeA,MAtBf,YAAuE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAE/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,MACTE,OAAOC,MAAMF,IAAuB,oDAAuBA,EAAvB,WCD7BG,MATf,YAAuD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,gBAElC,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OAAI,wBAAqBC,KAAK,SAASC,KAAMF,EAAQG,QAASL,EAA1D,SAA4EE,GAA/DA,SCY3BI,MAff,YAAwC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAEzB,OACE,qCACE,6BAAKD,IACJC,MCOQC,MAZf,YAAmC,IAAXC,EAAU,EAAVA,QAEtB,OACE,4BAAIA,KCAaC,E,4MACnBC,MAAQ,CACNrB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPoB,oBAAsB,SAAAC,GACpB,IAAMV,EAAOU,EAAEC,OAAOX,KACtB,EAAKY,UAAS,SAAAC,GACZ,OAAO,eACJb,EAAOa,EAAUb,GAAQ,O,EAKhCc,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBrB,KADiB,EACXC,QADW,EACFC,K,EAIzB0B,gCAAkC,WAAO,IAGjCxB,EAFW,EAAKiB,MAAdrB,KACM,EAAK2B,qBACuB,IAC1C,OAAOE,KAAKC,MAAM1B,I,uDAGV,IAAD,EAEwB2B,KAAKV,MAA5BrB,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,IACjBC,EAAQ4B,KAAKJ,qBACbvB,EAAqB2B,KAAKH,kCAEhC,OACE,qCACA,cAAC,EAAD,CAASZ,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBR,QAASwB,OAAOC,KAAKF,KAAKV,OAAQZ,gBAAiBsB,KAAKT,wBAE3E,cAAC,EAAD,CAASN,MAAM,aAAf,SACa,IAAVb,EAAc,cAAC,EAAD,CAAcgB,QAAQ,sBACpC,cAAC,EAAD,CAAYnB,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOA,EAAOC,mBAAoBA,a,GAzC9D8B,aCAjCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ae4928e4.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction Statistics ({good, neutral, bad, total, positivePercentage}) {\r\n\r\n  return (\r\n    <>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      {!Number.isNaN(positivePercentage) && <p>Positive feedback: {positivePercentage}%</p>}\r\n    </>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nexport default Statistics;","import React from 'react';\r\n\r\nfunction FeedbackOptions ({options, onLeaveFeedback}) {\r\n\r\n  return (\r\n    <>\r\n      {options.map(option => <button key={option} type='button' name={option} onClick={onLeaveFeedback}>{option}</button>)}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section ({ title, children }) {\r\n\r\n  return (\r\n    <>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Notification ({message}) {\r\n\r\n  return (\r\n    <p>{message}</p>\r\n  );\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\n\r\nexport default Notification;","import React, { Component } from 'react';\r\nimport Statistics from './Statistics';\r\nimport FeedbackOptions from './FeedbackOptions';\r\nimport Section from './Section';\r\nimport Notification from './Notification';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0\r\n  };\r\n\r\n  incrementStatistics = e => {\r\n    const name = e.target.name;\r\n    this.setState(prevState => {\r\n      return {\r\n        [name]: prevState[name] + 1\r\n      }\r\n    });\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    return good + neutral + bad;\r\n  }\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const { good } = this.state;\r\n    const total = this.countTotalFeedback();\r\n    const positivePercentage = good / total * 100;\r\n    return Math.round(positivePercentage);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { good, neutral, bad } = this.state;\r\n    const total = this.countTotalFeedback();\r\n    const positivePercentage = this.countPositiveFeedbackPercentage();\r\n\r\n    return (\r\n      <>\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions options={Object.keys(this.state)} onLeaveFeedback={this.incrementStatistics} />\r\n      </Section>\r\n      <Section title=\"Statistics\">\r\n        {total === 0 ? <Notification message=\"No feedback given\" /> \r\n        :<Statistics good={good} neutral={neutral} bad={bad} total={total} positivePercentage={positivePercentage} />}\r\n        \r\n      </Section>\r\n      </>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}